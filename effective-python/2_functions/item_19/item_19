Item 19: Provide optional behavior wiht keyword arguments

Python allows to pass in arguments by position

def remainder(number, divisor):
    return number % divisor

remainder(20, 7)

One add-on python has is that you can specify arguments by keyword as well using
the names of the arguments specified in the declaration

remainder(20, 7)
remainder(20, divisor=7)
remainder(number=20, divisor=7)
remainder(divisor=7, number=20)

However, positional arguments must be specified before keyword arguments.

remainder(number=20, 7) will raise a SyntaxError 

Also, each argument can be specified only once

remainder(20, number=7) will raise TypeError("got multiple values for argument
'number')

This flexibility allows 3 advantages:
1. first of all, keyword arguments makes it cleanear and much more evident for
    the reader what is being passed to the function

2. the second one is that keyword arguments can have default values in function
    declaration. This can allow to reduce the noise and make the code cleaner

Example: we want to calculate fluid flow rate.

def flow_rate(weight_diff, time_diff):
    return weight_diff / time_diff

We might want to calculate the flow rate not per second, but for larget intervals:
lets extend this function to do this

def flow_rate(weight_diff, time_diff, period):
    return (weight_diff / time_diff) * period

now if we want to see the flow rate per second, we still have to specify 1 for
the period.

To make the code less noisy, we specify default value for the period

def flow_rate(weight_diff, time_diff, period=1):
    return (weight_diff / time_diff) * period

Now if we omit the period argument when callin the function, python will
place 1 in the period and still work.

This works well for simple default values(tricky for complex defaults)
see item 20 use None and docstrings to specify dynamic default arguments


We could also add another optional argument to make the flow rate show not only
in kilograms but in any unit(a good exercise to work on)

When specifying a value for an optional argument, it is a best practice to 
use keywords. if you omit the keywords, it might lead to hard to trace issues.

Note that to have backwards compatibility it is crucial to use keyword arguments
for functions that support *args. It is evne better practice to use
keyword-only arguments.(see item21: enforce clarity with keyword-only args)

Things to remember:
1. function arguments can be specified by position or by keyword
2. keywords make it clear what argument is for what
3. keyword arguments with default values make it easy to add new behavior to
    a function, especially when funciton has existing callers
4. optional keyword arguments should always be passed by keyword instead of
    just by position


