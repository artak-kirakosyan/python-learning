Item 9 Use generator expressions for large comprehensions

The comprehensions and for loops usually generate a whole new list.
This is fine for small items, but once the lists become huge, it is a problem.

For example to print the number of characters on each line of a file, 
list comprehensions would store that number for each line.
If the file is humongous or maybe a never-ending network socket, it would be problematic

To solve this, Python has generator expressions. It could achieved by putting the list comprehension expression inside a () block.
example:
it = (len(line) for line in open('/tmp/file.txt'))

If we print out this object, it will have generator type.
Now we can use the next() method to progress step by step

next(it)
next(it)

When the generator is exhausted, it rises StopIteration exception.

Another powerful feature is to combine generators in composed expressions

We could use the previous generator to create a new one to calculate the square
root of the number of characters per line:
roots = ((x, x**0.5) for x in it)

roots would also be a generator

This speeds up the execution in Python very well.
The only gotcha is that the iterators returned by generator expressions are stateful, 
so we have to be careful not to use them more than once(see item 17: Be defensive when iterating
over arguments)

Things to remember:
1. List comprehensions can be exremely slow for large inputs(memory issue)
2. Generators avoid memory issues by producing outputs one at a time
3. Generators can be composed by passing the iterator of one generator to another
4. Generators execute very quickly when chained together

